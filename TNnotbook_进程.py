#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 05, 2020 11:28:05 PM CST  platform: Windows NT

import sys
from ttkthemes import ThemedTk
import time
from multiprocessing import Process
try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk

try:
	import ttk
	
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	
	py3 = True
	
	
class Toplevel1:
	def __init__(self):
		'''This class configures and populates the toplevel window.
		   top is the toplevel containing window.'''
		# _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		# _fgcolor = '#000000'  # X11 color: 'black'
		# _compcolor = '#d9d9d9' # X11 color: 'gray85'
		# _ana1color = '#d9d9d9' # X11 color: 'gray85'
		# _ana2color = '#ececec' # Closest X11 color: 'gray92'
		self.style = ttk.Style()
		# if sys.platform == "win32":
		#     self.style.theme_use('winnative')
		# self.style.configure('.',background=_bgcolor)
		# self.style.configure('.',foreground=_fgcolor)
		# self.style.configure('.',font="TkDefaultFont")
		# self.style.map('.',background=
		#     [('selected', _compcolor), ('active',_ana2color)])
		self.root = ThemedTk(theme="arc")
		# self.root = tk.Tk()
		
		
		self.root.geometry("1200x661+284+114")
		self.root.minsize(120, 1)
		self.root.maxsize(1924, 1061)
		self.root.resizable(1, 1)
		self.root.title("New Toplevel")
		# top.configure(background="#d9d9d9")
		#
		# self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
		# top.configure(menu = self.menubar)
		
		# self.style.configure('TNotebook.Tab', background=_bgcolor)
		# self.style.configure('TNotebook.Tab', foreground=_fgcolor)
		# self.style.map('TNotebook.Tab', background=
		#     [('selected', _compcolor), ('active',_ana2color)])
		self.TNotebook1 = ttk.Notebook(self.root)
		self.TNotebook1.place(relx=0.0, rely=0.0, relheight=1.0,
							  relwidth=1.0)
		self.TNotebook1.configure(takefocus="")
		self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
		self.TNotebook1.add(self.TNotebook1_t1, padding=3)
		self.TNotebook1.tab(0, text="Page 1", compound="left",
							underline="-1", )
		self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
		self.TNotebook1.add(self.TNotebook1_t2, padding=3)
		self.TNotebook1.tab(1, text="Page 2", compound="left",
							underline="-1", )
		self.f = tk.Frame(self.TNotebook1_t1, width=20, height=100,
						  bg="red")
		self.f.place(x=0, y=0)
		
		# self.f2 = tk.Frame(self.TNotebook1_t1, width=20, height=100, bg="blue")
		# self.f2.place(x=0, y=600,anchor="nw")
		# self.set_label()
	
	def inner(self):
		# while 1:
			time.sleep(3)
			lb = ttk.Label(self.f, text=1)
			lb.pack()
		
	def wapr(self):
		self.inner()
	
	def set_label(self):
		p = Process(target=self.wapr())
		p.start()
	#
	# def set_label(self): # 使用这个会报错 pickle 不能序列化lambda
	# 	p = Process(target=self.inner) # Call unbound method with explicit self
	# 	p.start()                      # Can't pickle 'tkapp' object
	
	def set_button(self):
		button = tk.Button(self.TNotebook1_t1,text = "bt",command = self.set_label)
		button.pack()

w = None

def destroy_Toplevel1():
	global w
	w.destroy()
	w = None



if __name__ == '__main__':
	app = Toplevel1()
	app.set_button()
	app.root.mainloop()





