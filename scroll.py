#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 14, 2020 09:56:08 PM CST  platform: Windows NT

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""
    def __init__(self, master):
        print "init AutoScroll"
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=vsb.set)
        except:
            pass
        self.configure(xscrollcommand=hsb.set)
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
              + tk.Place.__dict__.keys()
        # print methods
        """
        ['bubbletip', 'forget', '__module__', 'configure', 'pack_configure',
        'pack_slaves', 'pack_forget', 'pack_propagate', 'propagate', 'slaves',
        'pack_info', 'config', '__doc__', 'pack', '__module__', 'forget',
        'grid_propagate', 'grid_columnconfigure', 'grid_slaves', 'grid_bbox',
        'size', 'location', 'config', '__doc__', 'configure', 'grid_info',
        'columnconfigure', 'grid_remove', 'grid_configure', 'grid', 'bbox',
        'grid_rowconfigure', 'bubbletip', 'grid_size', 'grid_forget', 'slaves',
        'grid_location', 'propagate', 'rowconfigure', 'bubbletip', '__module__',
        'configure', 'place_forget', 'place_configure', 'place_info', 'place',
        'slaves', 'place_slaves', 'config', '__doc__', 'forget']
             """
        for meth in methods:
            # print meth
            if meth[0] != '_' and meth not in ('config', 'configure'):
                # print meth
                setattr(self, meth, getattr(master, meth))

    def __str__(self):
        return str(self.master)
    

class ScrolledText(AutoScroll, tk.Text):
    """A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed."""
    # @_create_container # 自动添加了一层frame组件，且frame变成了master
    def __init__(self, master, **kw): # return func(cls, container, **kw)
        innerframe = tk.Frame(master)
        innerframe.bind('<Enter>', lambda e: _bound_to_mousewheel(e, innerframe))
        innerframe.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, innerframe))
        innerframe.pack() # 有没有都一样
        
        tk.Text.__init__(self, innerframe, **kw)
        AutoScroll.__init__(self, innerframe)


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    print "child",widget.winfo_children()
    child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
    child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    widget.unbind_all('<MouseWheel>')
    widget.unbind_all('<Shift-MouseWheel>')

def _on_mousewheel(event, widget):
    widget.yview_scroll(-1*int(event.delta/120),'units')
  
def _on_shiftmouse(event, widget):
    widget.xview_scroll(-1*int(event.delta/120), 'units')



class Toplevel1(object):
    def __init__(self, top=None):
        top.geometry("600x300+374+246")
        self.style = ttk.Style()
        
        self.Scrolledtext1 = ScrolledText(top)
        # self.Scrolledtext1.pack(expand=1)
        # print self.Scrolledtext1.pack_slaves() # []
        
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.insert("end","woshiyigeresdddddddddddddddddfdd34rtrtdddn\n"*20)
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

if __name__ == '__main__':
    root = tk.Tk()
    Toplevel1(root)
    root.mainloop()




